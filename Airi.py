import discord
from discord.ext import commands
from discord import app_commands
import google.generativeai as genai
import os
from collections import defaultdict, deque

DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")

if not DISCORD_TOKEN or not CHANNEL_ID or not GOOGLE_API_KEY:
    raise EnvironmentError("‚ùå Missing necessary environment variables.")

CHANNEL_ID = int(CHANNEL_ID)

genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel("gemini-2.5-flash")

promptpay = """‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ ‚ÄúAiri‚Äù (‡πÑ‡∏≠‡∏£‡∏¥) ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö16 ‡∏õ‡∏µ ‡∏°‡∏µ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡∏™‡∏î‡πÉ‡∏™ ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á... (‡∏ï‡∏±‡∏î‡∏ó‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ß‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢)"""

history_data = defaultdict(lambda: deque(maxlen=10))

intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
bot = commands.Bot(command_prefix="/", intents=intents)

@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f"{bot.user} ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô AiriBot ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡πâ‡∏≤~ üíñ")

### üîÅ /reset ‚Äì ‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
@bot.tree.command(name="reset", description="‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡∏£‡∏¥")
async def reset_memory(interaction: discord.Interaction):
    history_data[interaction.user.id].clear()
    await interaction.response.send_message("‡πÑ‡∏≠‡∏£‡∏¥‡∏•‡∏∑‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡πâ‡∏≤~ üí´ ‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢~", ephemeral=True)

### üÜï /create_‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á ‚Äì ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
@bot.tree.command(name="create", description="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏∏‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
@app_commands.describe(name="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÄ‡∏ä‡πà‡∏ô chill ‡∏´‡∏£‡∏∑‡∏≠ project-abc")
async def create_channel(interaction: discord.Interaction, name: str):
    guild = interaction.guild
    existing = discord.utils.get(guild.text_channels, name=name)

    if existing:
        await interaction.response.send_message(f"‡∏´‡πâ‡∏≠‡∏á `{name}` ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡πâ‡∏≤~ üí°", ephemeral=True)
    else:
        try:
            await guild.create_text_channel(name)
            await interaction.response.send_message(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á `{name}` ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≤~ üè†", ephemeral=True)
        except discord.Forbidden:
            await interaction.response.send_message("‡πÑ‡∏≠‡∏£‡∏¥‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏ô‡πâ‡∏≤~ üò¢", ephemeral=True)

### üì© ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ä‡∏ï
@bot.event
async def on_message(message):
    if message.author.bot or message.channel.id != CHANNEL_ID:
        return

    user_history = list(history_data[message.author.id])
    parts = [{"text": promptpay}] + user_history

    for attachment in message.attachments:
        if attachment.content_type:
            if attachment.content_type.startswith("image/"):
                if attachment.content_type == "image/gif":
                    await message.reply("‡∏≠‡∏∏‡πâ‡∏¢~ ‡πÑ‡∏≠‡∏£‡∏¥‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏≤~ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏ô‡∏π‡∏¢‡∏±‡∏á‡∏î‡∏π‡∏†‡∏≤‡∏û .gif ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡πâ‡∏≤~ üò¢ ‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÅ‡∏ó‡∏ô‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢‡∏ô‡πâ‡∏≤~ üíñ")
                    return
                image_data = await attachment.read()
                parts.append({
                    "mime_type": attachment.content_type,
                    "data": image_data
                })
            elif attachment.content_type.startswith("video/"):
                await message.reply("‡∏≠‡∏∏‡πâ‡∏¢~ ‡∏û‡∏µ‡πà‡∏™‡πà‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏°‡∏≤‡πÄ‡∏´‡∏£‡∏≠‡∏Ñ‡∏∞~ üò≥ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏≠‡∏£‡∏¥‡∏¢‡∏±‡∏á‡∏î‡∏π‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ô‡πâ‡∏≤~ ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤~ ü•∫üí¶")
                return

    if message.content.strip():
        parts.append({"text": f"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {message.content.strip()}"})
    elif not message.attachments:
        return

    try:
        response = await model.generate_content_async(parts)
        if response.candidates and response.candidates[0].content.parts:
            reply = response.text.strip()
        else:
            reply = "‡∏≠‡∏∏‡πâ‡∏¢~ ‡πÑ‡∏≠‡∏£‡∏¥‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡πâ‡∏≤~ üò¢ ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢‡∏Ñ‡∏∞~"

        history_data[message.author.id].append({"text": f"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {message.content.strip()}"})
        history_data[message.author.id].append({"text": f"‡πÑ‡∏≠‡∏£‡∏¥: {reply}"})

        embed = discord.Embed(description=reply[:4096], color=0xFFB6C1)
        await message.reply(embed=embed)

        print(f"[{message.author}] -> {message.content}")
        print(f"[BOT] -> {reply}")

    except Exception as e:
        await message.reply(f"‚ùå ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏≤~ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ô‡∏¥‡∏î‡∏ô‡∏∂‡∏á‡πÄ‡∏•‡∏¢‡∏ô‡πâ‡∏≤~\n```{str(e)}```")
        print(f"‡∏ö‡∏≠‡∏ó‡πÄ‡∏≠‡πã‡∏≠: {str(e)}")

    await bot.process_commands(message)

bot.run(DISCORD_TOKEN)
